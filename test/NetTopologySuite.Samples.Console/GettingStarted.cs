using System.Security.Cryptography.X509Certificates;
using System.Threading;
using NetTopologySuite.Operation.Union;
using NUnit.Framework;

public class GettingStarted
{
    public GettingStarted()
    {
        NetTopologySuite.NtsGeometryServices.Instance  = new NetTopologySuite.NtsGeometryServices(
            NetTopologySuite.Geometries.Implementation.CoordinateArraySequenceFactory.Instance,
            new NetTopologySuite.Geometries.PrecisionModel(1000d),
            25832,
            NetTopologySuite.Geometries.GeometryOverlay.NG);
            
    }

    public void CreateGeometries()
    {
        // Get a geometry factor from configured NtsGemetryServices.
        // Differing from NtsGeometryServices.DefaultSRID we want one with SRID=4326
        var gf = NetTopologySuite.NtsGeometryServices.Instance.CreateGeometryFactory(4326);

        // Create a point at Aurich (lat=53.4837, long=7.5404)
        var pntAUR = gf.CreatePoint(new NetTopologySuite.Geometries.Coordinate(7.5404, 53.4837));
        // Create a point at Emden (lat=53.3646, long=7.1559)
        var pntLER = gf.CreatePoint(new NetTopologySuite.Geometries.Coordinate(7.1559, 53.3646));
        // Create a point at Leer (lat=53.2476, long=7.4550)
        var pntEMD = gf.CreatePoint(new NetTopologySuite.Geometries.Coordinate(7.4550, 53.2476));

        // Create a linestring from Aurich to Emden
        var lnsAURToEMD = gf.CreateLineString(new [] {
            new NetTopologySuite.Geometries.Coordinate(7.5404, 53.4837),
            new NetTopologySuite.Geometries.Coordinate(7.1559, 53.3646)
        });

        var lnsAURtoLER = gf.CreateLineString(new[] {
            new NetTopologySuite.Geometries.Coordinate(7.5404, 53.4837),
            new NetTopologySuite.Geometries.Coordinate(7.4550, 53.2476)
        });

        // Create a polygon from Aurich over Emden, Leer to Aurich
        var ply1 = gf.CreatePolygon(new[] {
            new NetTopologySuite.Geometries.Coordinate(7.5404, 53.4837),
            new NetTopologySuite.Geometries.Coordinate(7.1559, 53.3646),
            new NetTopologySuite.Geometries.Coordinate(7.4550, 53.2476),
            new NetTopologySuite.Geometries.Coordinate(7.5404, 53.4837),
        });

        // Alternativly you can build this polygon by building a LinearRing first.
        // A LinearRing requires 4 coordinates and 1st and last coordinate must be equal!
        var lnr = gf.CreateLinearRing(new[] {
            new NetTopologySuite.Geometries.Coordinate(7.5404, 53.4837),
            new NetTopologySuite.Geometries.Coordinate(7.1559, 53.3646),
            new NetTopologySuite.Geometries.Coordinate(7.4550, 53.2476),
            new NetTopologySuite.Geometries.Coordinate(7.5404, 53.4837),
        });
        var ply2 = gf.CreatePolygon(lnr);

        // Multi Geometries are build by passing arrays of geometries
        var mpnt = gf.CreateMultiPoint(new[] {pntAUR, pntLER, pntEMD});
        var mlns = gf.CreateMultiLineString(new[] { lnsAURToEMD, lnsAURtoLER });
        var mpoly = gf.CreateMultiPolygon(new[] { ply1 });

        // A geometry collection
        var gc = gf.CreateGeometryCollection(
            new NetTopologySuite.Geometries.Geometry[]
            { pntAUR, lnsAURToEMD, pntEMD, ply2, pntLER, lnsAURtoLER });

        // Create coordinate sequence
        var cs = gf.CoordinateSequenceFactory.Create(1, NetTopologySuite.Geometries.Ordinates.XYM);
        cs.SetX(0, 7.5404);
        cs.SetY(0, 53.4837);
        cs.SetM(0, 5432);
        var tpAUR2 = gf.CreatePoint(cs);
    }

    [Test]
    public void IOWkt()
    {
        const string wkt = "POINT M(7.5404 53.4837 5432)";
        var rdr = new NetTopologySuite.IO.WKTReader();

        var ptAUR = rdr.Read(wkt);

        var wrt = new NetTopologySuite.IO.WKTWriter();
        wrt.OutputOrdinates = NetTopologySuite.Geometries.Ordinates.AllOrdinates;
        string wktOut = wrt.Write(ptAUR);

        // Or
        //wktOut = ptAUR.AsText();
        
        TestContext.WriteLine(wktOut);
        TestContext.WriteLine(ptAUR.AsText());
        TestContext.WriteLine(ptAUR.ToString());
        var wkbWriter = new NetTopologySuite.IO.WKBWriter(NetTopologySuite.IO.ByteOrder.LittleEndian, true, true, true); 
        TestContext.WriteLine(NetTopologySuite.IO.WKBWriter.ToHex(wkbWriter.Write(ptAUR)));
    }

    [Test]
    public void IOWkb()
    {
        byte[] wkb = NetTopologySuite.IO.WKBReader.HexToBytes("01B90B00E0E8640000295C8FC2F5281E40CBA145B6F3BD4A40000000000000F8FF000000000038B540");
        var rdr = new NetTopologySuite.IO.WKBReader { HandleOrdinates = NetTopologySuite.Geometries.Ordinates.AllOrdinates, HandleSRID = true };

        var ptAUR = rdr.Read(wkb);

        var wrt = new NetTopologySuite.IO.WKBWriter(NetTopologySuite.IO.ByteOrder.LittleEndian, true, true, true);
        byte[] wktOut = wrt.Write(ptAUR);
    }

    public void SpatialPredicates()
    {
        NetTopologySuite.Geometries.Geometry geom = null;
        NetTopologySuite.Geometries.Geometry otherGeom = null;

        /*
         * Equals
         * Evaluates to  true  if a geometry is spatially equal to another geometry.
         */

        // As defined in SFA-Common
        bool equalSfs = geom.EqualsTopologically(otherGeom);
        // As required for .Net. 'EqualsExact' is called by overload of object.Equals(object obj)
        bool equalNet = geom.EqualsExact(otherGeom /*, tolerance*/);

        /*
         * Disjoint
         * Evaluates to `true` if a geometry is _spatially_ disjoint to another geometry.
         * This equivalent to negating the return value of an intersection test. 
         */
        bool disjoint = geom.Disjoint(otherGeom);

        /*
         * Intersects
         * Evaluates to `true` if a geometry _spatially_ intersects another geometry.
         */
        //
        bool intersects = geom.Intersects(otherGeom);

        /*
         * Touches
         * Evaluates to `true` if a geometry _spatially_ touches another geometry.
         */
        bool touches = geom.Touches(otherGeom);

        /*
         * Crosses
         * Evaluates to `true` if a geometry _spatially_ crosses another geometry.
         */
        bool crosses = geom.Crosses(otherGeom);

        /*
         * Within
         * Evaluates to `true` if a geometry is _spatially_ within another geometry.
         */
        bool within = geom.Within(otherGeom);

        /*
         * Contains
         * Evaluates to `true` if a geometry _spatially_ contains another geometry.
         */
        bool contains = geom.Contains(otherGeom);

        /*
         * Overlaps
         * Evaluates to `true` if a geometry _spatially_ overlaps another geometry.
         */
        bool overlaps = geom.Overlaps(otherGeom);

        /*
         * Relate
         * Evaluates the relationship between a geometry and another geometry
         * (see https://en.wikipedia.org/wiki/DE-9IM). An overload test if an
         * assumed intersection matrix correctly describes the relationship.
         */
        var im = geom.Relate(otherGeom);
        bool relate = geom.Relate(otherGeom, im.ToString());

        NetTopologySuite.Geometries.Geometry[] geometries = null;
        var prepGeom = NetTopologySuite.Geometries.Prepared.PreparedGeometryFactory.Prepare(geom);
        foreach (var geomItem in geometries)
        {
            // instead of 'Intersects' there are also
            // the other normal predicates except 'Relate',
            // plus 'ContainsProperly'
            if (prepGeom.Intersects(geomItem))
            {
                // do sth. with geomItem
            }
        }
    }

    [Test]
    public void SpatialOperation()
    {
        var rdr = new NetTopologySuite.IO.WKTReader();

        // Intersection
        const string wktPoly1 = "POLYGON ((10 10, 10 30, 30 30, 30 10, 10 10))";
        const string wktPoly2 = "POLYGON ((20 20, 20 40, 40 40, 40 20, 20 20))";
        var poly1 = rdr.Read(wktPoly1);
        var poly2 = rdr.Read(wktPoly2);

        // Should be POLYGON ((30 30, 30 20, 20 20, 20 30, 30 30))
        var polyInt = poly1.Intersection(poly2);
        TestContext.WriteLine("polyInt:\n{0}", polyInt);

        // Difference

        // Should be POLYGON ((10 30, 20 30, 20 20, 30 20, 30 10, 10 10, 10 30))
        var polyDiff = poly1.Difference(poly2);
        TestContext.WriteLine("polyDiff:\n{0}", polyDiff);

        const string wktLine1 = "LINESTRING (5 15, 15 25, 35 20)";
        const string wktLine2 = "LINESTRING (15 25, 35 20, 40 21)";
        var ln1 = rdr.Read(wktLine1);
        var ln2 = rdr.Read(wktLine2);
        // Should be LINESTRING(15 25, 35 20)
        var lnDiff = ln1.Difference(ln2);
        TestContext.WriteLine("LineDiff:\n{0}", lnDiff);

        // Symmetric Difference

        // Should be MULTILINESTRING((5 15, 15 25), (35 20, 40 21))
        var lnSymDiff = ln1.SymmetricDifference(ln2);
        TestContext.WriteLine("LineSymDiff:\n{0}", lnSymDiff);


        // Union

        // Should be POLYGON ((10 30, 20 30, 20 40, 40 40, 40 20, 30 20, 30 10, 10 10, 10 30))
        var polyUnion = poly1.Union(poly2);
        TestContext.WriteLine("polyUnion:\n{0}", polyUnion);

        // Should be GEOMETRYCOLLECTION (
        //    POLYGON ((20 30, 20 40, 40 40, 40 21, 40 20, 35 20, 30 20, 30 10, 10 10, 10 20, 10 30, 20 30)),
        //    LINESTRING (5 15, 10 20))
        var allUnion = poly1.Factory.CreateGeometryCollection(
            new NetTopologySuite.Geometries.Geometry[]
            {
                poly1, poly2, ln1, ln2
            }).Union();
        TestContext.WriteLine("allUnion:\n{0}", allUnion);


        // Buffer
        const string wktPoint = "POINT (15 15)";
        var pt = rdr.Read(wktPoint);
        // Create a buffer around a point with distance of 2d
        var ptBuffer = pt.Buffer(2);
        TestContext.WriteLine("Buffer:\n{0}", ptBuffer);


        // ConvexHull

        // Should be POLYGON ((10 10, 30 10, 40 20, 40 40, 20 40, 10 30, 10 10))
        var ch = polyUnion.ConvexHull();
        TestContext.WriteLine("ch:\n{0}", ch);

        // PointOnSurface

        // Should be POINT (25 25)
        var pos = polyUnion.PointOnSurface;
        TestContext.WriteLine("pos:\n{0}", pos);
    }

    [Test]
    public void Test()
    {
        const string wkt
        var rdr = new NetTopologySuite.IO.WKTReader();
        var poly = rdr.Read(wkt);
        var ivop = new NetTopologySuite.Operation.Valid.IsValidOp(poly);
        var err = ivop.ValidationError;
        TestContext.WriteLine(err);
        TestContext.WriteLine(poly.Area);
        poly = poly.Buffer(0);
        TestContext.WriteLine(poly.Area);

        Assert.That(poly.IsValid, Is.True);
    }
}
